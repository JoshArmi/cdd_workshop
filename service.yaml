openapi: 3.0.0
info:
  title: Spring Boot Demo API
  description: A simple Spring Boot REST API for managing messages
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: http://localhost:8080
    description: Docker container server

paths:
  /api/messages:
    post:
      summary: Create a new message
      description: Creates a new message with the provided content
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageContent'
      responses:
        '200':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get all messages
      description: Retrieves all messages in the system
      operationId: getAllMessages
      responses:
        '200':
          description: List of messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /api/messages/{id}:
    get:
      summary: Get message by ID
      description: Retrieves a specific message by its ID
      operationId: getMessageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Message retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Message not found

components:
  schemas:
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the message
          example: "550e8400-e29b-41d4-a716-446655440000"
        content:
          type: string
          description: The content of the message
          example: "Hello, World!"
        timestamp:
          type: string
          description: Creation timestamp of the message in RFC3339 format
          format: date-time
          example: "2024-03-14T12:00:00Z"
      required:
        - id
        - content
        - timestamp
    MessageContent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the message
          example: "03969354-4310-4798-84bb-ddc1becb18f1"
        content:
          type: string
          description: The content of the message
          example: "Hello, World!"
      required:
        - content
        - id
    Error:
      type: object
      properties:
        status:
          type: integer
          example: "400"
        path:
          type: string
          example: "/api/messages"
        timestamp:
          type: string
          description: Timestamp of the error in RFC3339 format
          format: date-time
          example: "2024-03-14T12:00:00Z"
        error:
          type: string
          example: "Bad Request"
      required:
        - content
        - id
        - timestamp

